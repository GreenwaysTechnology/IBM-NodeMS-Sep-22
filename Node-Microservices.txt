				Microservices
.....................................................................................

What is Micro service?
   Microservices - also known as the microservice architecture - is an architectural style that structures an application as a collection of services that are

Highly maintainable and testable
1.Loosely coupled
2.Independently deployable
3.Organized around business capabilities
4.Owned by a small team

The microservice architecture enables the rapid, frequent and reliable delivery of large, complex applications. It also enables an organization to evolve its technology stack.

Microservices are based on Design patterns:

1.Service Design pattern
2.Data Management Pattern
3.Deployment Pattern
4.Cross Cutting Patterns
5.Communication style patterns
6.Service Design pattern
7.Reliablity Pattern
8.Security Pattern
9.Observablity Pattern
.....................................................................................				Micro service Implemenation
...................................................................................

Micro services can be implemeneted in any language 

Java :

1.Spring Cloud
2.Vertx
3.Quarkus

Javascript (Node.js):
1.Moleculer
2.Loopback


What is Moleculer?
  Moleculer is open source Micro service framework.

Features of Moleculer:

1.Promise-based solution (async/await compatible)
2.request-reply concept
3.support event driven architecture with balancing
4.built-in service registry & dynamic service discovery
5.load balanced requests & events (round-robin, random, cpu-usage, latency, sharding)
6.many fault tolerance features (Circuit Breaker, Bulkhead, Retry, Timeout, Fallback)
plugin/middleware system
7.support versioned services
8.support Streams
9.service mixins
10.built-in caching solution (Memory, MemoryLRU, Redis)
11.pluggable loggers (Console, File, Pino, Bunyan, Winston, Debug, Datadog, Log4js)
12.pluggable transporters (TCP, NATS, MQTT, Redis, NATS Streaming, Kafka, AMQP 0.9, AMQP 1.0)
13.pluggable serializers (JSON, Avro, MsgPack, Protocol Buffer, Thrift)
14.pluggable parameter validator
15.multiple services on a node/server
16.master-less architecture, all nodes are equal
17.parameter validation with fastest-validator
18.built-in metrics feature with reporters (Console, CSV, Datadog, Event, Prometheus, StatsD)
19.built-in tracing feature with exporters (Console, Datadog, Event, Jaeger, Zipkin)
20.official API gateway, Database access and many other modulesâ€¦

....................................................................................
				Project Setup
....................................................................................

1.normal node project 
2.using moleculer cli

Project creation:
.................

E:\session\IBM\2022\sep\nodejsmicroservice>mkdir microserviceapp

E:\session\IBM\2022\sep\nodejsmicroservice>cd microserviceapp

E:\session\IBM\2022\sep\nodejsmicroservice\microserviceapp>npm init --yes
Wrote to E:\session\IBM\2022\sep\nodejsmicroservice\microserviceapp\package.json:

{
  "name": "microserviceapp",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}

E:\session\IBM\2022\sep\nodejsmicroservice\microserviceapp>mkdir services

npm install moleculer --save


Core concepts in Molecular:
..........................

1.Service:

 A service is a simple JavaScript module containing some part of a complex application. 
 A service represents a biz logic in your application.
 A Service is Object which represents  domain.

2.Service Broker : == Spring Container
  Service Broker is the heart of Moleculer.

ServiceBroker is Object === Express Application Object

Role of ServiceBroker:

 Provides all ms infra tools - service registery,load balancer,communication infra.
 ....
3.Node:
  A node is a simmple os process running o local or external network. A single node Instance
 can have single Broker, each broker can have multiple services

4.Transorter:
   Transporter is communication bus that services use to exchange messages.
   It transfers request,response,events...

5.Api GateWay:
    Component which exposes/facilates to communicate outside world 
.....................................................................................
			  Service Representation


1.REST Service
2.Back end Service -RPC
3.GraphQL

later we will see "REST Service"

RPC based Service Representation:

services/helloworld.service.js

const { ServiceBroker } = require('moleculer')

//create instance of service Broker 
const broker = new ServiceBroker()



>node services/helloworld.service.js
[2022-09-28T10:01:03.447Z] INFO  laptop-r2tggfdl-2080/BROKER: Moleculer v0.14.23 is starting...
[2022-09-28T10:01:03.449Z] INFO  laptop-r2tggfdl-2080/BROKER: Namespace: <not defined>
[2022-09-28T10:01:03.449Z] INFO  laptop-r2tggfdl-2080/BROKER: Node ID: laptop-r2tggfdl-2080
[2022-09-28T10:01:03.451Z] INFO  laptop-r2tggfdl-2080/REGISTRY: Strategy: RoundRobinStrategy
[2022-09-28T10:01:03.452Z] INFO  laptop-r2tggfdl-2080/REGISTRY: Discoverer: LocalDiscoverer
[2022-09-28T10:01:03.458Z] INFO  laptop-r2tggfdl-2080/BROKER: Serializer: JSONSerializer
[2022-09-28T10:01:03.468Z] INFO  laptop-r2tggfdl-2080/BROKER: Validator: FastestValidator
[2022-09-28T10:01:03.470Z] INFO  laptop-r2tggfdl-2080/BROKER: Registered 13 middleware(s).
[2022-09-28T10:01:03.584Z] INFO  laptop-r2tggfdl-2080/$NODE: Service '$node' stopped.
[2022-09-28T10:01:03.585Z] INFO  laptop-r2tggfdl-2080/BROKER: ServiceBroker is stopped. Good bye.

..................................................................................
				How to create a Service
....................................................................................

Service is Object , created using broker.createService(serviceDefintionObject)

service Defintion Object has lot of properties:
name  - each service must have name
actions - object which has methods of service


const { ServiceBroker } = require('moleculer')

//create instance of service Broker 
const broker = new ServiceBroker()

//create service :
broker.createService({
    name: 'HelloWorld',
    actions: {
        //service api
        sayHello() {
            return 'Hello,Moleculer'
        }
    }
})

//start moleculer server()
function main(){
    broker.start()
}
main()



How to invoke/call Service methods?

There are many ways

1.By using broker.start method
2.By using  REPL cli
3.By using another service => Service to Service calls

const { ServiceBroker } = require('moleculer')

//create instance of service Broker 
const broker = new ServiceBroker()

//create service :
broker.createService({
    name: 'HelloWorld',
    actions: {
        //service api
        sayHello() {
            return 'Hello,Moleculer'
        }
    }
})

//start moleculer server(brower)
function main() {
    broker.start()
        .then(() => {
            console.log("Moleculer server is succfully started")
            //invoke service
            broker.call('HelloWorld.sayHello')
                .then(res => console.log(res))
                .catch(err => { console.log(err) })
        })
        .catch(err => {
            console.log("Moleculer server faile  to server")
        })
}
main()
...................................................................................
			How to refactor code
....................................................................................
async function main() {
    try {
        await broker.start()
        const res = await broker.call('HelloWorld.sayHello')
        console.log(res)

    } catch (err) {
        console.log(err)
    }
}
main()
.......................................&&&&&&&&&&&&.................................
				Service Multiple Methods
.....................................................................................
const { ServiceBroker } = require('moleculer')

//create instance of service Broker 
const broker = new ServiceBroker()

//create service :
broker.createService({
    name: 'HelloWorld',
    actions: {
        //service api
        sayHello() {
            return 'Hello,Moleculer'
        },
        sayHai() {
            return 'Hai,Moleculer'
        },
        sayGreet() {
            return 'Greet,Moleculer'
        }
    }
})
async function main() {
    try {
        await broker.start()
        const hello = await broker.call('HelloWorld.sayHello')
        const hai = await broker.call('HelloWorld.sayHai')
        const greet = await broker.call('HelloWorld.sayGreet')

        console.log(hello,hai,greet)

    } catch (err) {
        console.log(err)
    }
}
main()
.....................................................................................
			Multiple Service
.....................................................................................
const { ServiceBroker } = require('moleculer')

//create instance of service Broker 
const broker = new ServiceBroker()

broker.createService({
    name: 'hello',
    actions: {
        //service api
        sayHello() {
            return 'Hello,Moleculer'
        }
    }
})
broker.createService({
    name: 'hai',
    actions: {
        //service api
        sayHai() {
            return 'Hai,Moleculer'
        }
    }
})
broker.createService({
    name: 'greet',
    actions: {
        //service api
        sayGreet() {
            return 'Greet,Moleculer'
        }
    }
})
async function main() {
    try {
        await broker.start()
        const hello = await broker.call('hello.sayHello')
        const hai = await broker.call('hai.sayHai')
        const greet = await broker.call('greet.sayGreet')

        console.log(hello, hai, greet)

    } catch (err) {
        console.log(err)
    }
}
main()
.....................................................................................
			    Service api parameters
....................................................................................

How to pass params to Service methods? How to read args from the service Method?

Parameters are stored inside special object called "Context"

Context Object:

1.Similar to Broker Object
2.It has all capacity of Broker object
3.Context object is used inside service definitions , where ever you require broker
  Object reference.

context object already created, and its refernce is avaiable inside "Service method" as args.

reading parameters

1.context.params 
  params are literal object what ever parameter we pass, it will inside this

context.params.variable


Passing args to service method:
  Passing args to service method as Object. {}

broker.call('hello.sayHello',{})

....................................................................................
const { ServiceBroker } = require('moleculer')

const broker = new ServiceBroker()

//create service :
broker.createService({
    name: 'hello',
    actions: {
        sayHello(ctx) {
            const name = ctx.params.name
            return `Hello ${name}`
        }
    }
})
//
broker.createService({
    name: 'math',
    actions: {
        multiply(ctx) {
            const a = ctx.params.a
            const b = ctx.params.b
            return a * b
        }
    }
})


async function main() {
    try {
        await broker.start()
        //params are passed as single literal object 
        const res1 = await broker.call('hello.sayHello', { name: 'Subramanian' })
        console.log(res1)
        const res2 = await broker.call('hello.sayHello', { name: 'Ford' })
        console.log(res2)

        const multply = await broker.call('math.multiply', { a: 10, b: '10' })
        console.log(multply)


    } catch (err) {
        console.log(err)
    }
}
main()
.............................*********..............................................
				 actions Syntax:

1.normal pattern

   actions: {
        multiply(ctx) {
            const a = ctx.params.a
            const b = ctx.params.b
            return a * b
        }
    }

2.expanded Pattern
    -This pattern is very usefull for having additional information for a methods.
     or meta information.

 params,cache,fallback---extra information information

const { ServiceBroker } = require('moleculer')

const broker = new ServiceBroker()

//create service :
broker.createService({
    name: 'hello',
    actions: {
        sayHello(ctx) {
            const name = ctx.params.name
            return `Hello ${name}`
        }
    }
})
//
broker.createService({
    name: 'math',
    actions: {
        //normal pattern 
        multiply(ctx) {
            const a = ctx.params.a
            const b = ctx.params.b
            return a * b
        },
        divide: {
            //param validation logic
            params: {
                a: "number",
                b: "number"
            },
            //biz logic 
            handler(ctx) {
                const a = ctx.params.a
                const b = ctx.params.b
                return a / b
            }
        }
    }
})


async function main() {
    try {
        await broker.start()
        //params are passed as single literal object 
        const res1 = await broker.call('hello.sayHello', { name: 'Subramanian' })
        console.log(res1)
        const res2 = await broker.call('hello.sayHello', { name: 'Ford' })
        console.log(res2)

        const multply = await broker.call('math.multiply', { a: 10, b: '10' })
        console.log(multply)


        //this code will throw validation error
        //const div = await broker.call('math.divide', { a: 10, b: '10' })
        const div = await broker.call('math.divide', { a: 10, b: 10 })
        console.log(div)


    } catch (err) {
        console.log(err)
    }
}
main()
....................................................................................
		    Dynamic Parameters and dynamic invocation of services
...................................................................................

Moleculer has a tool called "Moleculer REPL"
>npm install moleculer-repl --save



const { ServiceBroker } = require('moleculer')

const broker = new ServiceBroker()

broker.createService({
    name: 'math',
    actions: {
        divide: {
            //param validation logic
            params: {
                a: "number",
                b: "number"
            },
            //biz logic 
            handler(ctx) {
                const a = ctx.params.a
                const b = ctx.params.b
                return a / b
            }
        }
    }
})


async function main() {
    try {
        //start the broker 
        await broker.start()
        //use repl prompt
        broker.repl()
   
    } catch (err) {
        console.log(err)
    }
}
main()

mol $ call math.divide --a 10000 --b 234
>> Call 'math.divide' with params: { a: 10000, b: 234 } with meta: { '$repl': true } with options: {}
>> Execution time:4ms
>> Response:
42.73504273504273
.....................................................................................
			 Microservice communications -Communications Style
....................................................................................

Micro service communications happens across the applications or within applications.

Service Representation

1.rpc 
2.rest
3.graphql

Service communications

1.rpc to rpc

2.rest to rest

2.rest to rpc


Moleculer is microservice, generally microservices may be distributed across multiple machines(nodes) , which communicates via networks.


1.Service communication with in single broker

2.Service communication across multiple service brokers

Communication style

1. can be sync
2. can be async

RPI style
   method to method call
Event driven style
   methods communicates via events.


Types of services:

1.local service
   service which is implemented on single broker.
2.remote service
   Service which is implemented across the brokers.
 
Services can communicate within service broker-single node arch
Services can communicate across service brokers - multi node arch

How services are interacting each other?

 Using "Context" Object

Actors:

 1.Caller service, who is calling /consuming other services

 2.Callee service, who is called by others


Use case: Service to Service : RPI TO RPI - Method to method call - on single broker
...................................................................................

const { ServiceBroker } = require('moleculer')

const broker = new ServiceBroker()

broker.createService({
    name: 'math',
    actions: {
        add: {
            handler(ctx) {
                const a = ctx.params.a
                const b = ctx.params.b
                //call adder.add 
                return ctx.call('adder.add', { a: a, b: b })
            }
        }
    }

})
broker.createService({
    name: 'adder',
    actions: {
        add: {
            handler(ctx) {
                //object destructuring: - break object properties 
                const { a, b } = ctx.params
                return a + b
            }
        }
    }
})

async function main() {
    await broker.start()
    broker.repl()
}
main()

mol $ call math.add --a 10 --b 20
>> Call 'math.add' with params: { a: 10, b: 20 } with meta: { '$repl': true } with options: {}
>> Execution time:3ms
>> Response:
30
mol $

....................................................................................
				  Remote Service Communication
.....................................................................................

Microservices are loosly coupled services, runs indendently, how do they communicate

Remote Services
-Services are located across the nodes.
-nodes can be the same machine or different machines, or cloud.

Run two services in a different node.

node services/remote1.service.js

node services/remote2.service.js


remote1.service.js
const { ServiceBroker } = require('moleculer')

const broker = new ServiceBroker()

broker.createService({
    name: 'math',
    actions: {
        add: {
            handler(ctx) {
                const a = ctx.params.a
                const b = ctx.params.b
                //call adder.add 
                return ctx.call('adder.add', { a: a, b: b })
            }
        }
    }

})
async function main() {
    await broker.start()
    broker.repl()
}
main()
.........................
remote2.service.js


const { ServiceBroker } = require('moleculer')

const broker = new ServiceBroker()

broker.createService({
    name: 'adder',
    actions: {
        add: {
            handler(ctx) {
                //object destructuring: - break object properties 
                const { a, b } = ctx.params
                return a + b
            }
        }
    }
})

async function main() {
    await broker.start()
    broker.repl()
}
main()

mol $ call math.add --a 10 --b 20
>> Call 'math.add' with params: { a: 10, b: 20 } with meta: { '$repl': true } with options: {}
[2022-09-29T04:52:49.424Z] WARN  laptop-r2tggfdl-22476/BROKER: Service 'adder.add' is not registered.
>> ERROR:
ServiceNotFoundError: Service 'adder.add' is not found.
    at ServiceBroker.findNextActionEndpoint (E:\session\IBM\2022\sep\nodejsmicroservice\microserviceapp\node_modules\moleculer\src\service-broker.js:1130:13)
    at ServiceBroker.call (E:\session\IBM\2022\sep\nodejsmicroservice\microserviceapp\node_modules\moleculer\src\service-broker.js:1179:26)
    at Context.call (E:\session\IBM\2022\sep\nodejsmicroservice\microserviceapp\node_modules\moleculer\src\context.js:286:23)
    at Service.handler (E:\session\IBM\2022\sep\nodejsmicroservice\microserviceapp\services\remote1.service.js:13:28)
    at E:\session\IBM\2022\sep\nodejsmicroservice\microserviceapp\node_modules\moleculer\src\utils.js:212:22
    at ServiceBroker.timeoutMiddleware (E:\session\IBM\2022\sep\nodejsmicroservice\microserviceapp\node_modules\moleculer\src\middlewares\timeout.js:31:14)
    at ServiceBroker.fallbackMiddleware (E:\session\IBM\2022\sep\nodejsmicroservice\microserviceapp\node_modules\moleculer\src\middlewares\fallback.js:31:11)
    at ServiceBroker.errorHandlerMiddleware (E:\session\IBM\2022\sep\nodejsmicroservice\microserviceapp\node_modules\moleculer\src\middlewares\error-handler.js:14:10)
    at ServiceBroker.call (E:\session\IBM\2022\sep\nodejsmicroservice\microserviceapp\node_modules\moleculer\src\service-broker.js:1203:31)
    at handler (E:\session\IBM\2022\sep\nodejsmicroservice\microserviceapp\node_modules\moleculer-repl\src\commands\call.js:131:28)
Data:  { action: 'adder.add' }

Why the above error?

-Service not able to locate the other service, since other services are running in different nodes


In order to enable Remote Service communications , we need Transporters

Transporter is a channel and bridge layer among services.


In order to enable Remote Service communications , we need Message Brokers 


Transporters:

-Transporter is an important module if you are running services on multiple nodes. 

-Transporter communicates with other nodes. 

-It transfers events, calls requests and processes responses â€¦etc. 

-If a service runs on multiple instances on different nodes, the requests will be load-balanced among live nodes.


Transports:
............

Built-in transporter
TCP transporter - part of moleculer

Third party Brokers

NATS Transporter
Redis Transporter
MQTT Transporter
AMQP Transporter
Kafka Transporter
NATS Streaming (STAN) Transporter

TCP transporter:

This is a no-dependency, zero-configuration TCP transporter.
It uses Gossip protocol to disseminate node statuses, service list and heartbeats.
It contains an integrated UDP discovery feature to detect new and disconnected nodes on the network.
If the UDP is prohibited on your network, use urls option. It is a list of remote endpoints (host/ip, port, nodeID). It can be a static list in your configuration or a file path which contains the list.
 

Use case :How to use TCP transport as channel for service Communications.

We need to configure Service Broker to enable transport.

ServiceBroker object creation:

const broker = new ServiceBroker();

 Here we have not passed any parameter to ServiceBroker Constructor, if you dont, the default parameters will be passed.

Service Broker Parameters are called as "ServiceBroker Schema"

We can override service Broker Schema to enable broker vide features.

const { ServiceBroker } = require('moleculer')
const broker = new ServiceBroker({
    transporter:"TCP"
});

const { ServiceBroker } = require('moleculer')

const broker = new ServiceBroker({
    transporter: "TCP"
})

broker.createService({
    name: 'math',
    actions: {
        add: {
            handler(ctx) {
                const a = ctx.params.a
                const b = ctx.params.b
                //call adder.add 
                return ctx.call('adder.add', { a: a, b: b })
            }
        }
    }

})
async function main() {
    await broker.start()
    broker.repl()
}
main()

const { ServiceBroker } = require('moleculer')

const broker = new ServiceBroker({
    transporter: "TCP"
})

broker.createService({
    name: 'adder',
    actions: {
        add: {
            handler(ctx) {
                //object destructuring: - break object properties 
                const { a, b } = ctx.params
                return `${broker.nodeID} -> ${a} + ${b}`
            }
        }
    }
})

async function main() {
    await broker.start()
    broker.repl()
}
main()
......................************..................................................
mol $ call math.add --a 10 --b 20
>> Call 'math.add' with params: { a: 10, b: 20 } with meta: { '$repl': true } with options: {}
>> Execution time:6ms
>> Response:
'laptop-r2tggfdl-15124 -> 10 + 20'
.....................................................................................
			      Service communication via 
		   Third party brokers - NATS,Redis,RabbitMQ,Kaffka


NATS:
Steps:
1.You need to start NATS server.
https://nats.io/download/

docker run -p 4222:4222 -ti nats:latest


2.configure in service broker

const broker = new ServiceBroker({
    nodeID : 'IBM-Adder Service',
    transporter: "nats://localhost:4222"
});

3.install nats dirver package
npm install nats --save

4.Run nodes as usual
....................................................................................
				Serialization
Transporter needs a serializer module which serializes & deserializes the transferred packets. 
The default serializer is the JSONSerializer but there are several built-in serializer.

const { ServiceBroker } = require('moleculer')


const broker = new ServiceBroker({
  //  transporter:"TCP"
  transporter: "nats://localhost:4222",
  serializer: "JSON" // not necessary to set, because it is the default

});

..
const { ServiceBroker } = require('moleculer')

// const broker = new ServiceBroker({
//     transporter: "TCP"
// })
const broker = new ServiceBroker({
    transporter: "nats://localhost:4222",
    serializer: "JSON"
})
broker.createService({
    name: 'math',
    actions: {
        add: {
            handler(ctx) {
                const a = ctx.params.a
                const b = ctx.params.b
                //call adder.add 
                return ctx.call('adder.add', { a: a, b: b })
            }
        }
    }

})
broker.createService({
    name:'customer',
    actions: {
        list: {
            handler(ctx){
                return ctx.call('product.list')
            }
        }
    }
})

async function main() {
    await broker.start()
    broker.repl()
}
main()
...........
const { ServiceBroker } = require('moleculer')

// const broker = new ServiceBroker({
//     transporter: "TCP"
// })
const broker = new ServiceBroker({
    transporter: "nats://localhost:4222",
    serializer: "JSON"
})

broker.createService({
    name: 'adder',
    actions: {
        add: {
            handler(ctx) {
                //object destructuring: - break object properties 
                const { a, b } = ctx.params
                return `${broker.nodeID} -> ${a} + ${b}`
            }
        }
    }
})

broker.createService({
    name: 'product',
    actions: {
        list: {
            handler(ctx) {
                return [{ id: 1, name: 'Phone', qty: 10, price: 100 }, { id: 2, name: 'TV', qty: 10, price: 340 }]
            }
        }
    }
})

async function main() {
    await broker.start()
    broker.repl()
}
main()
....
mol $ call product.list
>> Call 'product.list' with params: {} with meta: { '$repl': true } with options: {}
>> Execution time:2ms
>> Response:
[
  { id: 1, name: 'Phone', qty: 10, price: 100 },
  { id: 2, name: 'TV', qty: 10, price: 340 }
]
..........................********...................................................
.....................................................................................
			Loosly Coupled Service Communication
				Event Driven Archs
			 How to communicate via events
....................................................................................

Broker has a built-in event bus to support Event-driven architecture and to send events to local and remote services.


Callee: Events Listeners

   events: {
        "order.created": {
            handler(ctx) {
                console.log("Payload:", ctx.params);
                console.log("Sender:", ctx.nodeID);
                console.log("Metadata:", ctx.meta);
                console.log("The called event name:", ctx.eventName);
            }
        }
    }
   

caller: Event emission

 broker/ctx.emit("order.created",{order:{id:1,name:'test'}}) - one to one
 broker/ctx.broadcast("order.created",{order:{id:1,name:'test'}}) - one to many


publisher.service.js
const { ServiceBroker } = require("moleculer")

const broker = new ServiceBroker({
    transporter: "TCP"
});

broker.createService({
    name: 'math',
    actions: {
        add: {
            handler(ctx) {
                // ctx.emit("adder.add", { a: ctx.params.a, b: ctx.params.b })
                ctx.broadcast("adder.add", { a: ctx.params.a, b: ctx.params.b })

                return 'Event has emitted'
            }
        }
    }
})

async function main() {

    try {
        await broker.start()
        console.log('Service Broker is ready')
        broker.repl();
    } catch (error) {
        console.log(error)
    }
}
main();

listener.service.js
const { ServiceBroker } = require("moleculer")

const broker = new ServiceBroker({
    transporter: "TCP"
});

broker.createService({
    name: 'adder',
    events: {
        "adder.add": {
            params: {
                a: "number",
                b: "number"
            },
            handler(ctx){
                console.log("Payload:", ctx.params);
                console.log("Sender:", ctx.nodeID);
                console.log("Metadata:", ctx.meta);
                console.log("The called event name:", ctx.eventName);
            }
        }
    }
})

async function main() {

    try {
        await broker.start()
        console.log('Service Broker is ready')
        broker.repl();
    } catch (error) {
        console.log(error)
    }
}
main();

listener2.service.js
const { ServiceBroker } = require("moleculer")

const broker = new ServiceBroker({
    transporter: "TCP"
});

broker.createService({
    name: 'math',
    actions: {
        add: {
            handler(ctx) {
                // ctx.emit("adder.add", { a: ctx.params.a, b: ctx.params.b })
                ctx.broadcast("adder.add", { a: ctx.params.a, b: ctx.params.b })

                return 'Event has emitted'
            }
        }
    }
})

async function main() {

    try {
        await broker.start()
        console.log('Service Broker is ready')
        broker.repl();
    } catch (error) {
        console.log(error)
    }
}
main();
.....................................................................................
			      Service Configurations

				Methods Types

/////////////////////////////////////////////////////////////////////////////////////////////

Service Methods:

1.public methods
    methods are accssiable outside 
2.private methods
  methods are not accssible outside
  methods are used to isloate complex logic from public methods.

public methods:
 any thing if you write inside actions are called public methods.

actions { 


}

private methods:

createService({

 //public methods
 actions: {

 },

 //private methods
 methods: {


 }

})
const { ServiceBroker } = require('moleculer')

// const broker = new ServiceBroker({
//     transporter: "TCP"
// })
const broker = new ServiceBroker()
broker.createService({
    name: 'math',
    //public methods
    actions: {
        add: {
            handler(ctx) {
                const { a, b } = ctx.params
                //call private methods 
                return this.add(a, b)
            }
        }
    },
    //private methods  
    methods: {
        add(a, b) {
            return a + b
        }
    }

})


async function main() {
    await broker.start()
    broker.repl()
}
main()
....................................................................................
...................................................................................
			  Service Life Cycle methods
...................................................................................

Service life cycle methods are called by broker in various stages of services

Service life cycle methods are very usefull for doing some initalization, re initalizations tasks.


1. created() {
        // Fired when the service instance created (with `broker.loadService` or `broker.createService`)
    },

    merged() {
        // Fired after the service schemas merged and before the service instance created
    },
    
    async started() {
        // Fired when broker starts this service (in `broker.start()`)
    }

    async stopped() {
        // Fired when broker stops this service (in `broker.stop()`)
    }

const { ServiceBroker } = require('moleculer')

// const broker = new ServiceBroker({
//     transporter: "TCP"
// })
const broker = new ServiceBroker()
broker.createService({
    name: 'math',
    //public methods
    actions: {
        add: {
            handler(ctx) {
                const { a, b } = ctx.params
                //call private methods 
                return this.add(a, b)
            }
        }
    },
    //private methods  
    methods: {
        add(a, b) {
            return a + b
        }
    },
    //life cycle methods
    created() {
        // Fired when the service instance created (with `broker.loadService` or `broker.createService`)
        console.log('service created')
    },

    merged() {
        // Fired after the service schemas merged and before the service instance created
        console.log('service merged')
    },
    
    async started() {
        // Fired when broker starts this service (in `broker.start()`)
        console.log('service started')
    },
    async stopped() {
        // Fired when broker stops this service (in `broker.stop()`)
        console.log('service stoped')
    }



})


async function main() {
    await broker.start()
    broker.repl()
}
main()
....................................................................................
				Service Dependencies
....................................................................................
Dependencies
  If your service depends on other services, use the dependencies property in the schema. 
The service waits for dependent services before calls the started lifecycle event handler.

Syntax:

dependencies: [
      "likes", // shorthand w/o version
      "v2.auth", // shorthand w version
      { name: "users", version: 2 }, // with numeric version
      { name: "comments", version: "staging" } // with string version
],
async started() {
      console.log("It will be called after all dependent services are available.");
      const users = await this.broker.call("users.list");
}

const { ServiceBroker } = require("moleculer")

const broker = new ServiceBroker();

broker.createService({
    name: 'comments',
    actions: {
        findAll() {
            return 'Comments'
        }
    },
    //Dependency
    dependencies: [
        "posts"
    ],
    //Life cycle methods
    created() {
        console.log('Comments Service Created')
    },
    merged() {
        // Fired after the service schemas merged and before the service instance created
        console.log('Comments Service merged')
    },

    async started() {
        // Fired when broker starts this service (in `broker.start()`)
        console.log('Comments Service started')
    },
    async stopped() {
        // Fired when broker stops this service (in `broker.stop()`)
        console.log('Comments Service stoped')
    },

})


broker.createService({
    name: 'posts',
    actions: {
        findAll() {
            return [{ id: 1, name: 'Microservices' }]
        }
    },
    //Life cycle methods
    created() {
        console.log('Posts Service Created')
    },
    merged() {
        // Fired after the service schemas merged and before the service instance created
        console.log('Posts Service merged')
    },

    async started() {
        // Fired when broker starts this service (in `broker.start()`)
        console.log('Posts Service started')
    },
    async stopped() {
        // Fired when broker stops this service (in `broker.stop()`)
        console.log('Posts Service stoped')
    }
})

async function main() {
    try {
        await broker.start()
        broker.repl()
    } catch (err) {
        console.log(err)
    }
}
main()
....................................................................................
....................................................................................
			 Service Code Reuse- Service Inheritance
....................................................................................

A Service has many options, those options may be repeated in many other services,
like common settings.

We can isloate common features / options into a separate service, we can reuse across multiple services -  Inheritance.

How to implement inheritance in moleculer?

Javascript can support only single inheritance, only one parent allowed for a child.

Java like languages support interfaces for multi parent patterns, javascript has no such facility.

Javascript has a design pattern and implementation ,called "mixin", through mixin we can inherit many super objects.

Moleculer has mixin property


Use case:
1.if you write any REST Controller.
2.if you write database operations inside your service.
etc...

Eg: in case of inheritance.....

Parent services are created using "plain javascript" not like broker.createService
...................**********************..........................................

inheritance.service.js
const { ServiceBroker } = require('moleculer')
const hello = require('./helloparent.service')
const broker = new ServiceBroker()

//parent services

const hai = {
    name: 'hai',
    actions: {
        sayHai() {
            return 'Hai'
        }
    }
}



//child service 
broker.createService({
    name: 'greeter',
    mixins: [hello, hai],
    actions: {
        sayGreet() {
            return 'greet'
        }
    }
})


async function main() {
    await broker.start()
    broker.repl()
}
main()

helloparent.service.js
module.exports = {
    name: 'hello',
    actions: {
        sayHello() {
            return 'Hello'
        }
    }
}
.....................................................................................
		Defining Service Properties and How to override them

Service has 

1.methods called actions
2.properties which are defined inside "settings"
3.parent settings and actions can be overriden inside child service.
const { ServiceBroker } = require('moleculer')
const broker = new ServiceBroker();

//simulating some webserver settings

const webServer = {
    name: 'webserver',
    //parent properties
    settings: {
        port: 8080,
        host: 'ibm.com'
    }
}

broker.createService({
    name: 'MyWebServer',
    mixins: [webServer],
    //override existing properties
    settings: {
        port: 3000
    },
    actions: {
        getInfo() {
            return this.settings.port
        }
    }
})

async function main() {
    await broker.start()
    broker.repl()
}
main() 
....................................................................................
...................................................................................
				Types of Services

Moleculer Provides two types of service

1.Custom Services
   The services are created with broker object - broker.createService
2.Built services
  The services are provided by Broker
 $node
   Used for administration


Moleculer Provides two types of service

1.Custom Services
   The services are created with broker object
2.Built services
  The services are provided by Broker
 $node
   Used for administration

How to list all services using $node
 call $node.services
>> Call '$node.services' with params: {} with meta: { '$repl': true } with options: {}
>> Execution time:1ms
>> Response:
[
  {
    name: '$node',
    version: undefined,
    fullName: '$node',
    settings: {},
    metadata: {},
    local: true,
    available: true,
    nodes: [ 'laptop-r2tggfdl-17828' ]
  },
  {
    name: 'greeter',
    version: undefined,
    fullName: 'greeter',
    settings: { port: 3000, host: 'ibm.com' },
    metadata: {},
    local: true,
    available: true,
    nodes: [ 'laptop-r2tggfdl-17828' ]
  }
]

$ call $node.list
>> Call '$node.list' with params: {} with meta: { '$repl': true } with options: {}
>> Execution time:1ms
>> Response:
[
  {
    id: 'laptop-r2tggfdl-17828',
    instanceID: 'c7fd8078-2bf2-42ee-88f6-1fd20184eb3c',
    available: true,
    local: true,
    lastHeartbeatTime: 0,
    config: {},
    client: { type: 'nodejs', version: '0.14.21', langVersion: 'v16.15.0' },
    metadata: {},
    ipList: [ '172.26.240.1', '172.22.176.1', '192.168.0.105' ],
    port: null,
    hostname: 'LAPTOP-R2TGGFDL',
    udpAddress: null,
    cpu: null,
    cpuSeq: null,
    seq: 3,
    offlineSince: null
  }
]

broker.createService({})
.....................................................................................
  			 Async service and Sync Service

Service returns data async - called async service
Service returns data sync -  called sync service...

const { ServiceBroker } = require('moleculer')


const broker = new ServiceBroker()

broker.createService({
    name: 'math',
    actions: {
        add: {
            async handler(ctx) {
                const result = await ctx.call('adder.add', { a: 10, b: 10 })
                return result
            }
        }
    }
})

broker.createService({
    name: 'adder',
    actions: {
        add: {
            handler(ctx) {
                //return Promise 
                return new this.Promise((resolve, reject) => {
                    setTimeout(resolve, 5000, ctx.params.a + ctx.params.b)
                })
            }
        }
    }
})

async function main(){
    await broker.start()
    broker.repl()
}
main()
...................................................................................
			How to return stream as Response from the file
...................................................................................
const { ServiceBroker } = require('moleculer')
const fs = require('fs')
const path = require('path')

const broker = new ServiceBroker()

//stream service
broker.createService({
    name: 'storage',
    actions: {
        get: {
            handler(ctx) {
                const filePath = path.join(__dirname, 'assets/info.txt');
                const options = {
                    encoding: 'UTF-8'
                }
                const stream = fs.createReadStream(filePath, options)
                let data = ''
                stream.on('data', chunk => {
                    data += chunk
                })
                stream.on('end', () => {
                    console.log(chunk)
                })
            }
        }
    }
})


async function main() {
    await broker.start()
    broker.repl()
}
main()
....................................................................................
				RestFull WebService


Moleculer Modules:
..................

Moleculer core lib provides only how to create backend services, service interactions.

If i want to integrate lets say, rest api,databases, then we have to look at moleculer modules.

1.Gateways
2.Database and stores
3.Metrics & Tracing 
4.General 
5.Security
6.Tasks&Queues
7.Jobs
etc...
1.GateWay : moleculer-web:Official API Gateway for Moleculer framework.

Features:

support HTTP & HTTPS
serve static files
multiple routes
support global, route, alias middlewares
support file uploading
alias names (with named parameters & REST shorthand)
whitelist
multiple body parsers (json, urlencoded)
CORS headers
ETags
HTTP2
Rate limiter
before & after call hooks
Buffer & Stream handling
middleware mode (use as a middleware in ExpressJS Application)
support authorization and auth
.....................................................................................
			How to write first rest service
.....................................................................................

const { ServiceBroker } = require('moleculer')
const ApiGateWay = require('moleculer-web')

const broker = new ServiceBroker()

//create apigateWay
broker.createService({
    name: 'ApiGateWay',
    mixins: [ApiGateWay]
})


async function main() {
    await broker.start()
}
main()

.................................................................................
				Greeter Rest Service

const { ServiceBroker } = require('moleculer')
const ApiGateWay = require('moleculer-web')

const broker = new ServiceBroker()

//create apigateWay
broker.createService({
    name: 'ApiGateWay',
    mixins: [ApiGateWay]
})

broker.createService({
    name: 'greeter',
    actions: {
        sayHello() {
            return 'Hello,Moleculer'
        }
    }
})

broker.createService({
    name: 'math',
    actions: {
        add() {
            return 10 + 10
        }
    }
})

async function main() {
    await broker.start()
}
main()



how to call backend service(rpc service) from the GateWay Service?

http://localhost:3000/servicename/methodname
http://localhost:3000/greeter/sayHello
http://localhost:3000/hello/sayHello
....................................................................................
			Distributed Rest Service



User----send Request------ApiGateWay --------Services

Front End Service:
const { ServiceBroker } = require('moleculer')
const ApiGateWay = require('moleculer-web')

const broker = new ServiceBroker({
    transporter: "TCP",
    serializer: "JSON"
})

//create apigateWay
broker.createService({
    name: 'ApiGateWay',
    mixins: [ApiGateWay]
})
broker.createService({
    name: 'math',
    actions: {
        add: {
            handler(ctx) {
                //call adder.add 
                return ctx.call('adder.add', { a: 10, b: 10 })
            }
        }
    }

})

async function main() {
    await broker.start()
}
main()
..................................
const { ServiceBroker } = require('moleculer')

const broker = new ServiceBroker({
    transporter: "TCP",
    serializer: "JSON"
})

broker.createService({
    name: 'adder',
    actions: {
        add: {
            handler(ctx) {
                //object destructuring: - break object properties 
                const { a, b } = ctx.params
                const result = a +b 
                return `${broker.nodeID} -> ${result}`
            }
        }
    }
})

async function main() {
    await broker.start()
    broker.repl()
}
main()
.....................................................................................
			 Configuration-Routers Configuration
.....................................................................................
const { ServiceBroker } = require('moleculer')
const ApiGateWay = require('moleculer-web')

const broker = new ServiceBroker({
    transporter: "TCP",
    serializer: "JSON"
})

// http://localhost:3000/api/math/add

//create apigateWay
broker.createService({
    name: 'ApiGateWay',
    mixins: [ApiGateWay],
    settings: {
        routes: [{
            path: '/admin'
        },
        {
            path: '/api'
        }]
    }

})
broker.createService({
    name: 'math',
    actions: {
        add: {
            handler(ctx) {
                return 10 + 10
            }
        }
    }

})

async function main() {
    await broker.start()
}
main()
.............................................................................................
    		How to restrict service method/actions access outside
				whiteList - configuration
.....................................................................................
const { ServiceBroker } = require('moleculer')
const ApiGateWay = require('moleculer-web')

const broker = new ServiceBroker({
    transporter: "TCP",
    serializer: "JSON"
})

// http://localhost:3000/api/math/add

//create apigateWay
broker.createService({
    name: 'ApiGateWay',
    mixins: [ApiGateWay],
    settings: {
        routes: [{
            path: '/admin'
        },
        {
            path: '/api',
            whitelist: [
                "math.add",
                //"math*"
            ]

        }]
    }

})
broker.createService({
    name: 'math',
    actions: {
        add: {
            handler(ctx) {
                return 10 + 10
            }
        },
        div: {
            handler(ctx) {
                return 10 / 10
            }
        }
    }

})

async function main() {
    await broker.start()
}
main()

http://localhost:3000/api/math/div

{
name: "ServiceNotFoundError",
message: "Service 'math.div' is not found.",
code: 404,
type: "SERVICE_NOT_FOUND",
data: {
action: "math.div"
}
}
.....................................................................................	
			     URL Mapping
.....................................................................................

URL Mapping in moleculer:

http://localhost:3000/api/serviceName/actionName

  This is not good way to map urls , which more difficult to remember, it is not user friendly
it is not even secure,the reason, we expose the back end service to end users.

Aliases:
........
  You can use aliases(dummyname/fakename)-Virtual path, instead of action name.

 settings: {
        routes: [
            {
                path: "/api",
                aliases: { 

                    "hello" : "greeter.hello",
                    "users" :  "users.list"
                }             
            }
        ]

http://localhost:3000/api/hello
http://localhost:3000/api/users

const { ServiceBroker } = require('moleculer')
const ApiGateWay = require('moleculer-web')

const broker = new ServiceBroker({
    transporter: "TCP",
    serializer: "JSON"
})

//http://localhost:3000/api/add
//create apigateWay
broker.createService({
    name: 'ApiGateWay',
    mixins: [ApiGateWay],
    settings: {
        routes: [{
            path: '/admin'            
        },
        {
            path: '/api',
            whitelist: [
                //"math.add",
                "math*"
            ],
            aliases: {
                "add": "math.add",
                "div": "math.div"
            }

        }]
    }

})
broker.createService({
    name: 'math',
    actions: {
        add: {
            handler(ctx) {
                return 10 + 10
            }
        },
        div: {
            handler(ctx) {
                return 10 / 10
            }
        }
    }

})

async function main() {
    await broker.start()
}
main()
.....................................................................................			HTTP Verbs Mapping - GET,POST,PUT,DELETE,PATCH
....................................................................................

aliases: {
   "GET users": "user.list",  //GET list is default method
   "GET users/:id": "user.get", //users/1 users/2 users/3
   "POST users": "user.create",
   "PUT users/:id": "user.update",
   "DELETE users/:id": "user.remove"
}



const { ServiceBroker } = require("moleculer");
const ApiGateWayService = require("moleculer-web");
const PRODUCTS = require('./mock-data/products')

const broker = new ServiceBroker();

//CURD service : 

broker.createService({
    name: 'products',
    actions: {
        //GET ALL products
        list: {
            handler(ctx) {
                return PRODUCTS;
            }
        },
        //GET product by id
        //products/1
        get: {
            handler(ctx) {
                console.log('products',ctx.params)
                return PRODUCTS.filter(product => product.id == ctx.params.id)
            }
        },
        //save
        create(ctx) {
            console.log(ctx.params)
            return 'Product Created'
        },
        //update
        update(ctx) {
            console.log(ctx.params)
            return 'Product updated'
        },
        //delete
        remove(ctx) {
            console.log(ctx.params)
            return 'Product removed'
        }
    }
})


broker.createService({
    name: 'APIGateWay',
    mixins: [ApiGateWayService],
    settings: {
        routes: [{
            path: '/api',
            aliases: {
                "GET products": "products.list",  //GET list is default method
                "GET products/:id": "products.get", //users/1 users/2 users/3
                "POST products": "products.create",
                "PUT products/:id": "products.update",
                "DELETE products/:id": "products.remove"
            }
        }]
    }
})


async function init() {
    try {
        await broker.start();
    }
    catch (e) {
        log(e);
    }
}
init();
.....................................................................................
			 How to reduce path mapping syntax

SHORT Cut 


Without short cut
  aliases: {
                "GET users": "user.list",  //GET list is default method
                "GET users/:id": "user.get", //users/1 users/2 users/3
                "POST users": "user.create",
                "PUT users/:id": "user.update",
                "DELETE users/:id": "user.remove"
            }
With Short cut

it will map actions automatically but there is rule , method names should be like below
 aliases: { 
   "REST users" : "users"
 }

method names:
 list
 get
 create
 update
 remove
const { ServiceBroker } = require("moleculer");
const ApiGateWayService = require("moleculer-web");
const PRODUCTS = require('./mock-data/products')

const broker = new ServiceBroker();

//CURD service : 

broker.createService({
    name: 'products',
    actions: {
        //GET ALL products
        list: {
            handler(ctx) {
                return PRODUCTS;
            }
        },
        //GET product by id
        //products/1
        get: {
            handler(ctx) {
                console.log('products', ctx.params)
                return PRODUCTS.filter(product => product.id == ctx.params.id)
            }
        },
        //save
        create(ctx) {
            console.log(ctx.params)
            return 'Product Created'
        },
        //update
        update(ctx) {
            console.log(ctx.params)
            return 'Product updated'
        },
        //delete
        remove(ctx) {
            console.log(ctx.params)
            return 'Product removed'
        }
    }
})


broker.createService({
    name: 'APIGateWay',
    mixins: [ApiGateWayService],
    settings: {
        routes: [{
            path: '/api',
            aliases: {
                "REST products": "products",
                //"REST users" : "users"
            }
        }]
    }
})


async function init() {
    try {
        await broker.start();
    }
    catch (e) {
        log(e);
    }
}
init();
..................................................................................
		  	Convert any back end service into rest api
....................................................................................
			Auto aliases: without mapping rest api 
.....................................................................................

The auto-alias feature allows you to declare your route alias directly in your services.
The gateway dynamically build the full routes from the servic schema

Still 
 you can restrict url access using whitelist
 you can configure your own path mapping using aliases
 you can configure auto aliase

routes: [
            {
                path: "/api",
                aliases: {
                    "REST users": "users",
                    "GET myapi"(req, res) {
                        // res.end("Hello This is my api")
                        res.end(JSON.stringify(USERS));
                    }
                },
                autoAliases:true
            }
]

Service Configuration:

Back end Service
broker.createService({
  name:'products'
  actions : {
  
         list: {

	    handler(ctx){

	    }
	 }
 		  
   }

})
Convert Back end into rest service

broker.createService({
  name:'products'
  actions : {
  
         list: {
	
            // /api/products
	    rest: "GET /	
	    handler(ctx){

	    }
	 }
 		  
   }

})
.....................................................................................
const { ServiceBroker } = require("moleculer");
const ApiGateWayService = require("moleculer-web");
const PRODUCTS = require('./mock-data/products')

const broker = new ServiceBroker();

//CURD service : 

broker.createService({
    name: 'products',
    actions: {
        //GET ALL products
        list: {
            rest: "GET /",
            handler(ctx) {
                return PRODUCTS;
            }
        },
        //GET product by id
        //products/1
        get: {
            rest: "GET /:id",
            handler(ctx) {
                console.log('products', ctx.params)
                return PRODUCTS.filter(product => product.id == ctx.params.id)
            }
        },
        //save
        create: {
            rest: "POST /",
            handler(ctx) {
                console.log(ctx.params)
                return 'Product Created'
            }
        },
        //update
        update: {
            rest: "PUT /:id",
            handler(ctx) {
                console.log(ctx.params)
                return 'Product update'
            }
        },
        //delete
        remove: {
            rest: "DELETE /:id",
            handler(ctx) {
                console.log(ctx.params)
                return 'Product update'
            }
        }
    }
})


broker.createService({
    name: 'APIGateWay',
    mixins: [ApiGateWayService],
    settings: {
        routes: [{
            path: '/api',
            aliases: {
                //here you can even give configuration
            },
            autoAliases: true
        }]
    }
})


async function init() {
    try {
        await broker.start();
    }
    catch (e) {
        log(e);
    }
}
init();
....................................................................................
			  Cross cutting concerns
				Middlewares
....................................................................................

Moleculer supports express like middleares for cross cutting concerns..

Types of middleware
1.global level middleware
2.route-level middleware & aliase-level middleware

Middlwares

settings:[
  use:[    //Global middleware
    cookieParser(),
    helmet()	
  ]
]
routes:[
  {
    path:'/api',
    use:[
      compression() //route middlewares
    ],
    aliases:{ 
      "GET /auth" : [
         auth.isAuthenticated() //aliases middlewares
      ]

    }
  }

]


const { ServiceBroker } = require("moleculer");
const ApiGateWayService = require("moleculer-web");
const PRODUCTS = require('./mock-data/products')
const compression = require('compression')

const broker = new ServiceBroker();

//CURD service : 

broker.createService({
    name: 'products',
    actions: {
        //GET ALL products
        list: {
            rest: "GET /",
            handler(ctx) {
                return PRODUCTS;
            }
        },
        //GET product by id
        //products/1
        get: {
            rest: "GET /:id",
            handler(ctx) {
                console.log('products', ctx.params)
                return PRODUCTS.filter(product => product.id == ctx.params.id)
            }
        },
        //save
        create: {
            rest: "POST /",
            handler(ctx) {
                console.log(ctx.params)
                return 'Product Created'
            }
        },
        //update
        update: {
            rest: "PUT /:id",
            handler(ctx) {
                console.log(ctx.params)
                return 'Product update'
            }
        },
        //delete
        remove: {
            rest: "DELETE /:id",
            handler(ctx) {
                console.log(ctx.params)
                return 'Product update'
            }
        }
    }
})


broker.createService({
    name: 'APIGateWay',
    mixins: [ApiGateWayService],
    settings: {
        routes: [{
            path: '/api',
            use: [
                compression()
            ],
            aliases: {
                //here you can even give configuration
            },
            autoAliases: true
        }]
    }
})


async function init() {
    try {
        await broker.start();
    }
    catch (e) {
        log(e);
    }
}
init();
.....................................................................................
                      How to handle Errors In moleculer


You can add route-level and global custom error handlers.


Global Error Handling

settings:[
  
   //global error handler
  onError(req,res,err){
      //send error report
     res.setHeader("")
     res.end("GlobalError" + err.message)
  }
]


 routes: [{
            path: '/api',
            use: [
                compression()
            ],
            aliases: {
                //here you can even give configuration
            },
            autoAliases: true,
	  onError(req,res,err){
    		  //send error report
   		  res.setHeader("")
     		  res.end("GlobalError" + err.message)
  	  }
        }]

Error Formater methods
 
methods: {
   reformatError(err){
      return _.pick(err,["name","message","code","type","data"])
   }
}  


const { ServiceBroker } = require("moleculer");
const ApiGateWayService = require("moleculer-web");
const PRODUCTS = require('./mock-data/products')
const compression = require('compression')
const broker = new ServiceBroker();

const { MoleculerError } = require("moleculer").Errors;

class MyBusinessError extends MoleculerError {
    constructor(msg, data) {
        super(msg || `This is my business error.`, 500, "MY_BUSINESS_ERROR", data);
    }
}


broker.createService({
    name: 'products',
    actions: {
        //GET ALL products
        list: {
            rest: "GET /",
            handler(ctx) {
                let isError = true;
                if (isError) throw new MyBusinessError();
                return PRODUCTS;
            }
        },
        //GET product by id
        get: {
            rest: "GET /:id",
            handler(ctx) {
                console.log(ctx.params)
                return PRODUCTS.filter(product => product.id == ctx.params.id)
            }
        },
        //save
        create: {
            rest: "POST /",
            handler(ctx) {
                console.log(ctx.params)
                return 'Product Created'
            }
        },
        //update
        update: {
            rest: "PUT /:id",
            handler(ctx) {
                console.log(ctx.params)
                return 'Product update'
            }
        },
        //delete
        remove: {
            rest: "DELETE /:id",
            handler(ctx) {
                console.log(ctx.params)
                return 'Product update'
            }
        }
    }
})
broker.createService({
    name: 'APIGateWay',
    mixins: [ApiGateWayService],
    settings: {
        // Global error handler
        onError(req, res, err) {
            res.setHeader("Content-Type", "text/plain");
            res.writeHead(501);
            res.end("Global error: " + err.message);
        },
        routes: [{
            path: '/api',
            use: [
                compression()
            ],
            aliases: {
            },
            autoAliases: true,
            // Route error handler
            onError(req, res, err) {
                res.setHeader("Content-Type", "application/json; charset=utf-8");
                res.writeHead(500);
                res.end(JSON.stringify({ err: err }));
            }
        }]
    }
})
async function main() {
    try {
        await broker.start();
    }
    catch (e) {
        log(e);
    }
}
main()
Advanced Configurations

port,host,http2,https
.....................
settings: {
		// Exposed port
		port: 4000,

		// Exposed IP
		ip: "0.0.0.0",

		// HTTPS server with certificate
		https: {
			key: fs.readFileSync(path.join(__dirname, "../ssl/key.pem")),
			cert: fs.readFileSync(path.join(__dirname, "../ssl/cert.pem"))
		},

		//http2: true,

		// Global CORS settings
		cors: {
			origin: "*",
			methods: ["GET", "OPTIONS", "POST", "PUT", "DELETE"],
			allowedHeaders: "*",
			//exposedHeaders: "*",
			credentials: true,
			maxAge: null
		},

		// Rate limiter
		rateLimit: {
			window: 10 * 1000,
			limit: 10,
			headers: true
		},

		etag: true
}
........................................**************************...................
			Database Integration
		   Microservice Pattern : Data Management	
		       Database Per Service
.....................................................................................
According to Microservice pattern called "Database Per Service".


NeDb:
 In memormy and default database for Moleculer

Features:

-Default CURD operations
-Caching enabled
-pagination support
-Pluggable adapter - when even ever you want you can change database
-many adpaters supported
  -mongodb,postresql,sqllight,mysql,mssql.
-filtering supports
-encode and decode
-entity life cycle events

Lib for generating fake datas :fakerator

Steps:

npm i moleculer-db
npm i fakerator


const { ServiceBroker } = require("moleculer");
const ApiGateWayService = require("moleculer-web");
const DbService = require('moleculer-db')
const Fakerator = require('fakerator');
const { started } = require("moleculer-web");

//Fakerator object we need to create
const fakerator = new Fakerator();

const broker = new ServiceBroker({
    transporter: 'TCP'
});

//db service
broker.createService({
    name: 'users',
    mixins: [DbService],
    adapter: new DbService.MemoryAdapter(),
    settings: {
        /**
         *  Field filtering list. It must be an `Array`. If the value is `null` or `undefined` doesn't filter the fields of entities.
         */
        fields: ["_id", "firstName", "lastName", "email", "status"]
    },
    //life cycle method
    afterConnected() {
        //seeding the database with default data
        this.logger.info('connection started')
    },

    methods: {
        async seedDB() {
            this.logger.info('Seeding User Database starts');
            //generate fake users
            const fakeUsers = fakerator.times(fakerator.entity.user, 10);
            //insert into db
            const insertedUsers = await this.adapter.insertMany(fakeUsers);
            this.logger.info(`Created ${insertedUsers.length}`, insertedUsers)
        }
    },
    //service life cycle
    async started() {
        if ((await this.adapter.count()) === 0) {
            await this.seedDB();
        } else {
            this.logger.info(`DB contains ${await this.adapter.count()} users`)
        }
    }
})

broker.createService({
    name: 'ApiGateWayService',
    mixins: [ApiGateWayService],
    settings: {
        routes: [
            {
                path: "/api",
                aliases: {
                  "REST users": "users"  
                }
            }
        ]
    }
})

async function init() {
    try {
        await broker.start();
    }
    catch (e) {
        log(e);
    }
}
init();
....................................................................................
		              Service Registry and Discovery
.....................................................................................

1.Service Registry

 It is mini /small database , key-value pair database, in memory database.
 Which has all service,actions,event listeners, nodes information.

Points:
1.Every Broker has in built Service Registry
     Moleculer has built in in-memory registry, we can use that registry directly.

2.All services local or remote are registered with service registry as soon you create   service

3.Molecular has built in registry called LocalDiscoveryRegistry, which is not using third party registry servers
  like apache zoo keeper,cosule,etcd,eurka....

4.if you want to make other servers as service registry -

  registry: {
        discoverer: "redis://redis-server:6379"
    }  
const broker = new ServiceBroker({
registry: {
        discoverer: "redis://redis-server:6379"
    } 
});

What is discovery?
   
   Discovery  means the lookup, search, we are going to search "services" from the registry infra structure.

         "All Services when is created is registered in Service Registry"

Moleculer looks up services from the registry by name.
You can change registery server from LocalDiscover to Redis,etcd3,

1.Start Redis Server.

docker run  -p 6379:6379 redis

2.install redis driver
npm install ioredis --save

const broker = new ServiceBroker({
    transporter: "nats://localhost:4222",
    registry: {
        //discoverer:'Redis'
        discoverer: "redis://localhost:6379"
    }
});

[2021-07-31T08:44:43.219Z] INFO  laptop-r2tggfdl-24816/REGISTRY: Discoverer: RedisDiscoverer

..............................................................................................
				High Availability and scalibity
..............................................................................................
			   	
 				  Load Balancing

In Server-side load balancing, the instances of the service are deployed on multiple servers and then a load balancer is put in front of them. It is generally a hardware load balancer. All the incoming requests traffic firstly comes to this load balancer acting as a middle component. It then decides to which server a particular request must be directed to based on some algorithm.

Disadvantages of Server-side load balancing:

Server side load balancer acts as a single point of failure as if it fails, all the instances of the microservice becomes inaccessible as only load balancer has the list of servers.

Since each microservice will have a separate load balancer, the overall complexity of the system increases and it becomes hard to manage.

The network latency increases as the number of hops for the request increases from one to two with the load balancer, one to the load balancer and then another from load balancer to the microservice.


2. Client-side Load Balancing

The instances of the service are deployed on multiple servers. Load balancer's logic is part of the client itself, it holds the list of servers and decides to which server a particular request must be directed to based on some algorithm. These client side load balancers are also known as software load balancers.

Disadvantages of Client-side load balancing
The load balancer's logic is mixed up with the microservice code.


............................

Server side Load balancer is very usefull to manage trafic from outside applications.
Mobile clients and webclients trafic easily can be managed.

Client side load balancers are very usefull to mangae trafic inside microservice application.


Why we need load balancer?

1. To scale services instances
 A single service may not sufficient to handle multiple concurrent request.

How to select which service instance to be assigned to caller(client), 

   With help of Load Balancer.

Load Balancer balances incomming load and route according to "router algorthims" provided by load balancers.


Built-in strategies

 ->RoundRobin strategy
	This strategy selects a node based on round-robin algorithm.
   Refer:https://en.wikipedia.org/wiki/Round-robin_DNS
 ->Random strategy
	This strategy selects a node randomly.
 ->CPU usage-based strategy
	This strategy selects a node which has the lowest CPU usage. Due to the node list can 	be very long, it gets samples and selects the node with the lowest CPU usage from only 	samples instead of the whole node list.

 ->Latency-based strategy
	This strategy selects a node which has the lowest latency, measured by periodic ping commands. Notice that the strategy only ping one of nodes from a single host.

In Moleculer load balancers are built in, part of Registry , which is part of broker.

Moleculer loader balancer by default uses RoundRobin algorthim, if you want to change different one, you can override

 registry: {
        strategy: "Latency",
        strategyOptions: {
            sampleCount: 15,
            lowLatency: 20,
            collectCount: 10,
            pingInterval: 15
        }
    }


How to implement load balancing?

1.You need to clone the services n- number of times.
  lets say i have service called "adder" service , i need to run adder service 2 instances

2.Each service is going to run in different nodes. Each node must be identified quickly.
  Node name should not be hardcoded.
  In Genernal Node Id would be  - computername_processId



How to test ?

Open 3 cmd 

1.first command prompt

node services/mathloadbalancer.service.js

const { ServiceBroker } = require('moleculer')
const ApiGateWayService = require("moleculer-web");

const broker = new ServiceBroker({
    //nodeID: - machineName-processId
    transporter: 'TCP',
    //load balancer configuration
    registry: {
        discoverer: 'LOCAL', //type of registry
        strategy: 'RoundRobin' //load balancer algorthim
    }
})
//back end service
broker.createService({
    name: 'math',
    actions: {
        get: {
            rest: "GET /add",
            handler(ctx) {
                return ctx.call('adder.add', { a: ctx.params.a, b: ctx.params.b })
            }
        }
    }
})

broker.createService({
    name: 'ApiGateWayService',
    mixins: [ApiGateWayService],
    settings: {
        routes: [
            {
                path: "/api",
                aliases: {

                },
                autoAliases: true
            }
        ]
    }
})

async function main() {
    try {
        await broker.start()
        broker.repl();
    }
    catch (err) {
        console.log(err);
    }

}
main()

2.Open 2 cmd and run this command

>node services/adderloadbalancer.service.js
>node services/adderloadbalancer.service.js

const { ServiceBroker } = require('moleculer')

const broker = new ServiceBroker({
    //nodeID: - machineName-processId
    transporter: 'TCP',
    //load balancer configuration
    registry: {
        discoverer: 'LOCAL', //type of registry
        strategy: 'RoundRobin' //load balancer algorthim
    }
})
//back end service
broker.createService({
    name: 'adder',
    actions: {
        add: {
            handler(ctx) {
                const { a,b } = ctx.params;
                return `${a + b} from ${broker.nodeID}`;
            }
        }
    }
})

async function main() {
    try {
        await broker.start()
        broker.repl();
    }
    catch (err) {
        console.log(err);
    }

}
main();
.....................................................................................
.............................&&&&&&&&&&&&&&...................................................
			 Microservices Pattern: Realiability
..............................................................................................

In Microservices, services are talking each other, while talking there are possiblity.

A. Callee Service may slow than expected duration by caller. - Slow calls

B. Callee may throw error , then caller gets exception which will be progataged across the app
   which may stop the entire app.

How to deal / solve the problem of above one ?

   Via Realibility pattern, we can solve the Problem.

Moleculer Provides Fault tolerance , through which we can solve
 

-Timeout

    Service-X  is calling Service-Y

1.You may get Result(succees/errors) "on time".

2.YOu may not get any thing beyond time.

3.Timeout defines deadlines for services


eg:
   Service-X expects result in 500 ms from Service-Y, What if Service-Y not able to give result within that time line , Service-Y will throw TimeoutException.

Now you need to decide how to Handle TimeoutException?

 -throw exception and handle it
 -You can have alternate fallback api to return result to the caller.


Any falut tolerence alogorthim in moleculer can be configured in two places

1.At broker level
const broker = new ServiceBroker({
    requestTimeout: 5 * 1000 // in milliseconds
});

2.At service level

broker.call("posts.find", {}, { timeout: 3000 });

services/timeoutmain.service.js


const { ServiceBroker } = require('moleculer');

const broker = new ServiceBroker({
    transporter: "TCP",
    requestTimeout: 5 * 1000 // in milliseconds

});
broker.createService({
    name: 'main',
    actions: {

        begin: {
            // Call the 'getCachedResult' method when error occurred
            fallback: "getCachedResult",
            async handler(ctx) {
                const { a, b, timeout } = ctx.params
                let res = await ctx.call('remotetimeout.calculate', { a, b }, {
                    timeout: timeout
                })
                console.log(`Result Got From Remote Services ${res}`)
            }
        }

    },
    methods: {
        getCachedResult() {
            return `From the Cache 0`
        }
    }
})
async function init() {
    await broker.start()
    broker.repl()
}
init();

services/remotetimeout.service.js
const { ServiceBroker } = require('moleculer');

const broker = new ServiceBroker({
    transporter: "TCP",
    requestTimeout: 5 * 1000 // in milliseconds
});

broker.createService({
    name: 'remotetimeout',
    actions: {
        async calculate(ctx) {
            const { a, b } = ctx.params
            return new Promise((resolve, reject) => {
                setTimeout(resolve, 3000, `${a + b} - ${broker.nodeID} `)
            })
        }
    }
})

async function init() {
    await broker.start()
    broker.repl()
}
init();

call main.begin --a 10 --b 20 --timeout 5000
>> Call 'main.begin' with params: { a: 10, b: 20, timeout: 5000 } with meta: { '$repl': true } with options: {}
Result Got From Remote Services 30 - laptop-r2tggfdl-13828

call main.begin --a 10 --b 20 --timeout 2000
>> Call 'main.begin' with params: { a: 10, b: 20, timeout: 2000 } with meta: { '$repl': true } with options: {}
[2022-05-27T09:43:13.543Z] WARN  laptop-r2tggfdl-13612/BROKER: Request 'remotetimeout.calculate' is timed out. { requestID: '6e3a1abe-432d-41eb-9311-ee9026e207e5', nodeID: 'laptop-r2tggfdl-13828', timeout: 2000 }
[2022-05-27T09:43:13.544Z] WARN  laptop-r2tggfdl-13612/MAIN: The 'main.begin' request is failed. Return fallback response. { requestID: '6e3a1abe-432d-41eb-9311-ee9026e207e5', err: "Request is timed out when call 'remotetimeout.calculate' action on 'laptop-r2tggfdl-13828' node." }
>> Execution time:2s
>> Response:
'From the Cache 0'
.............................................********************...................
/////////////////////////////////////////////////////////////////////////////////////////////
				Circuit Breaker
.............................................................................................
CircuitBreaker: 

Automatically fail fast when execution repeatedly fails.

CB is a state machine with three states:
  CLOSED, OPEN, HALF_OPEN

CLOSED : No exception,No Problm in the System.
 if service is working fine, then cb state would be closed.

OPEN:
   if something went wrong, cb opens , tries to trip , never allows further calls

 Service A -----calls -----Service B

 Cb allows serviceA to call Service B if no error/exception.

 cb will never allow ServiceA to call Service B if exception is thrown.

HALF_OPEN:
   if service need to recover from failures to normal state  , cb will go to half_open state 

 from half_open to Open :  still failures are there in the system
 from half_open to closed : Recovered from failures, system is normal


How to implement CB in Moleculer?

1.Broker level : Global cb settings

const broker = new ServiceBroker({
    circuitBreaker: {
        enabled: true,
        threshold: 0.5,
        minRequestCount: 20,
        windowTime: 60, // in seconds
        halfOpenTime: 5 * 1000, // in milliseconds
        check: err => err && err.code >= 500
    }
});

enable: Enable feature
threshold	
   Number	0.5	
   Threshold value. 0.5 means that 50% should be failed for tripping.
minRequestCount	
   Number	20	
  Minimum request count. Below it, CB does not trip (It never goes to open state)

windowTime	
   Number	60	
 Number of seconds for time window.

halfOpenTime	
  Number	10000
 Number of milliseconds to switch from open to half-open state

check	Function	err && err.code >= 500	A function to check failed requests.


2.Service level : Only for particular services

broker.createService({
{
    name: "users",
    actions: {
        create: {
            circuitBreaker: {
                // All CB options can be overwritten from broker options.
                threshold: 0.3,
                windowTime: 30
            },
            handler(ctx) {}
        }
    }
};
})
..............................................................................................


services/main.cb.service.js
const { ServiceBroker } = require('moleculer');

const broker = new ServiceBroker({
    transporter: "TCP",
    circuitBreaker: {
        enabled: true,
        threshold: 0.1,
        minRequestCount: 1,
        windowTime: 60, // in seconds
        halfOpenTime: 5 * 1000, // in milliseconds
        check: err => {
            console.log('check function -Main')
          //  console.log(err)
            return err && err.code >= 500
        }
    }
});
broker.createService({
    name: 'main',
    events: {
        "$circuit-breaker.opened"(opened) {
            console.log("main CB open created -Main service:", opened.nodeID, opened.action);
        },
        "$circuit-breaker.closed"(opened) {
            console.log("main CB closed created -Main service:", opened.nodeID, opened.action);
        },
        "$circuit-breaker.half-opened"(opened) {
            console.log("main CB Half created -Main service:", opened.nodeID, opened.action);
        }

    },
    actions: {
        begin: {
            circuitBreaker: {
                // All CB options can be overwritten from broker options.
                threshold: 0.0,
                windowTime: 30
            },
            fallback: (ctx, err) => `Data From Caching Server ${0}`,
            async handler(ctx) {
                const { a, b, invocationNumber } = ctx.params
                let res = await ctx.call('remotecb.calculate', { a, b, invocationNumber })
                console.log(`Result Got From Remote Services ${res}`)

            }
        }
    }
})

async function init() {
    await broker.start()
    broker.repl()
}
init();

services/remote.cb.service.js
const { ServiceBroker } = require('moleculer');

const broker = new ServiceBroker({
    transporter: "TCP",
    circuitBreaker: {
        enabled: true,
        threshold: 0.1,
        minRequestCount: 1,
        windowTime: 60, // in seconds
        halfOpenTime: 5 * 1000, // in milliseconds
        check: err => {
            console.log('check function -Main')
            console.log(err)
            return err && err.code >= 500
        }
    }
});

broker.createService({
    name: 'remotecb',
    actions: {
        async calculate(ctx) {
            const { a, b, invocationNumber } = ctx.params
            return new Promise((resolve, reject) => {
                if (invocationNumber >= 10) {
                    setTimeout(reject, 100, `Something went wrong`)
                } else {
                    setTimeout(resolve, 100, `${a + b} - ${broker.nodeID} `)
                }
            })
        }
    }
})

async function init() {
    await broker.start()
    broker.repl()
}
init();


Testing:

//failure case
call main.begin --a 10 --b 20 --invocationNumber 9 

//postive case
call main.begin --a 10 --b 20 --invocationNumber 90
....................................................................................
                     Micro Service Managment Patterns
...................................................................................

1.Molculer cli and runner
2.Logger
3.Tracing and Metics
4.Deployment - Docker

.....................................................................................
			Moleculer cli and Moleculer Runner
....................................................................................

Moleculer Runner
 Moleculer Runner is a helper script that helps you run Moleculer projects. With it, you donâ€™t need to create a ServiceBroker instance with options. Instead, you can create a moleculer.config.js file in the root of repo with broker options. Then simply call the moleculer-runner in NPM script, and it will automatically load the configuration file, create the broker and load the services. Alternatively, you can declare your configuration as environment variables.

Moleculer cli
 Provides features
1.create projects
2.mananage project life cycles
3.which embeded moleculer runner.

npm i -g moleculer-cli
*********************************Thank you**************************************


			











